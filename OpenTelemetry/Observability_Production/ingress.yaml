apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: observability-ingress
  namespace: observability
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # 增加超时时间用于大查询
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    # 增加 body 大小限制用于大批量数据
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    # 启用 gRPC 支持
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    # 基本认证
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Observability'
    # 速率限制
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - mimir.DOMAIN.com
    - tempo.DOMAIN.com
    - loki.DOMAIN.com
    - otlp.DOMAIN.com  # 专用的 OTLP 端点
    secretName: observability-tls
  rules:
  # Mimir 查询端点
  - host: mimir.DOMAIN.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mimir
            port:
              number: 8080
  # Tempo 查询端点
  - host: tempo.DOMAIN.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tempo
            port:
              number: 3200
  # Loki 查询端点
  - host: loki.DOMAIN.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: loki
            port:
              number: 3100
  # 专用的 OTLP 数据接收端点（无认证）
  - host: otlp.DOMAIN.com
    http:
      paths:
      - path: /v1/traces
        pathType: Prefix
        backend:
          service:
            name: tempo
            port:
              number: 4318
      - path: /v1/metrics
        pathType: Prefix
        backend:
          service:
            name: mimir
            port:
              number: 8080
      - path: /v1/logs
        pathType: Prefix
        backend:
          service:
            name: loki
            port:
              number: 3100
---
# 专用的 OTLP 数据接收 Ingress（无认证）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otlp-data-ingress
  namespace: observability
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # 数据接收优化
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # 启用 gRPC 支持
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    # 无认证 - 用于数据接收
    # 速率限制
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # 客户端 IP 保留
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
spec:
  tls:
  - hosts:
    - otlp-data.DOMAIN.com
    secretName: otlp-data-tls
  rules:
  - host: otlp-data.DOMAIN.com
    http:
      paths:
      # OTLP HTTP 端点
      - path: /v1/traces
        pathType: Prefix
        backend:
          service:
            name: tempo
            port:
              number: 4318
      - path: /v1/metrics
        pathType: Prefix
        backend:
          service:
            name: mimir
            port:
              number: 8080
      - path: /loki/api/v1/push
        pathType: Prefix
        backend:
          service:
            name: loki
            port:
              number: 3100
---
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  namespace: observability
type: Opaque
data:
  # 用户名: admin, 密码: SecureP@ssw0rd2024!
  # 使用 htpasswd -nb admin 'SecureP@ssw0rd2024!' | base64 -w 0 生成
  auth: YWRtaW46JGFwcjEkRjVuSGJHNGckSEJmVmhHWnNiTGdxdlNNWGhLbkNxLgoK
---
# 网络策略 - 更严格的安全控制
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: observability-network-policy
  namespace: observability
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # 允许来自 ingress-nginx 的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # 允许来自监控命名空间的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  # 允许同命名空间内的通信
  - from:
    - podSelector: {}
  # 允许外部访问 OTLP 端点（用于数据接收）
  - from: []
    ports:
    - protocol: TCP
      port: 4318  # OTLP HTTP
    - protocol: TCP
      port: 4317  # OTLP gRPC
  egress:
  # 允许访问 GCS
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  # 允许 DNS 查询
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # 允许同命名空间内的通信
  - to:
    - podSelector: {}
---
# Pod 安全策略（如果集群支持）
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: observability-psp
  namespace: observability
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# 服务监控器（如果使用 Prometheus Operator）
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: observability-stack
  namespace: observability
  labels:
    app: observability
spec:
  selector:
    matchLabels:
      prometheus.io/scrape: "true"
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
